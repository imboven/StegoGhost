"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å StegoGhost
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
"""

import sys
import os
from pathlib import Path
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from stego_engine import StegoEngine
from crypto_module import CryptoModule
import traceback


class StegoGhostGUI(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.stego_engine = StegoEngine()
        self.crypto_module = CryptoModule()
        
        self.init_ui()
        self.apply_dark_theme()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("StegoGhost - –°—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        self.setGeometry(100, 100, 800, 600)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üîê StegoGhost")
        header.setAlignment(Qt.AlignCenter)
        header.setStyleSheet("font-size: 24px; font-weight: bold; padding: 10px;")
        main_layout.addWidget(header)
        
        # –¢–∞–±—ã
        self.tabs = QTabWidget()
        self.tabs.addTab(self.create_hide_tab(), "üîí –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        self.tabs.addTab(self.create_extract_tab(), "üîì –ò–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        main_layout.addWidget(self.tabs)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    def create_hide_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_group = QGroupBox("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        image_layout = QHBoxLayout()
        
        self.hide_image_path = QLineEdit()
        self.hide_image_path.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        self.hide_image_path.setReadOnly(True)
        image_layout.addWidget(self.hide_image_path)
        
        browse_btn = QPushButton("–û–±–∑–æ—Ä...")
        browse_btn.clicked.connect(self.browse_hide_image)
        image_layout.addWidget(browse_btn)
        
        image_group.setLayout(image_layout)
        layout.addWidget(image_group)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_group = QGroupBox("–°–æ–æ–±—â–µ–Ω–∏–µ")
        message_layout = QVBoxLayout()
        
        self.message_text = QTextEdit()
        self.message_text.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)...")
        message_layout.addWidget(self.message_text)
        
        char_count_layout = QHBoxLayout()
        self.char_count_label = QLabel("–°–∏–º–≤–æ–ª–æ–≤: 0 / 4096")
        self.message_text.textChanged.connect(self.update_char_count)
        char_count_layout.addWidget(self.char_count_label)
        char_count_layout.addStretch()
        message_layout.addLayout(char_count_layout)
        
        message_group.setLayout(message_layout)
        layout.addWidget(message_group)
        
        # –ü–∞—Ä–æ–ª—å
        password_group = QGroupBox("–ü–∞—Ä–æ–ª—å")
        password_layout = QHBoxLayout()
        
        self.hide_password = QLineEdit()
        self.hide_password.setEchoMode(QLineEdit.Password)
        self.hide_password.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å...")
        password_layout.addWidget(self.hide_password)
        
        self.show_password_btn = QPushButton("üëÅ")
        self.show_password_btn.setCheckable(True)
        self.show_password_btn.toggled.connect(self.toggle_password_visibility)
        self.show_password_btn.setMaximumWidth(40)
        password_layout.addWidget(self.show_password_btn)
        
        password_group.setLayout(password_layout)
        layout.addWidget(password_group)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∏—è
        self.hide_btn = QPushButton("üîê –°–∫—Ä—ã—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.hide_btn.clicked.connect(self.hide_message)
        self.hide_btn.setMinimumHeight(40)
        layout.addWidget(self.hide_btn)
        
        # –õ–æ–≥
        self.hide_log = QTextEdit()
        self.hide_log.setReadOnly(True)
        self.hide_log.setMaximumHeight(100)
        layout.addWidget(self.hide_log)
        
        layout.addStretch()
        return widget
        
    def create_extract_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_group = QGroupBox("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        image_layout = QHBoxLayout()
        
        self.extract_image_path = QLineEdit()
        self.extract_image_path.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        self.extract_image_path.setReadOnly(True)
        image_layout.addWidget(self.extract_image_path)
        
        browse_btn = QPushButton("–û–±–∑–æ—Ä...")
        browse_btn.clicked.connect(self.browse_extract_image)
        image_layout.addWidget(browse_btn)
        
        image_group.setLayout(image_layout)
        layout.addWidget(image_group)
        
        # –ü–∞—Ä–æ–ª—å
        password_group = QGroupBox("–ü–∞—Ä–æ–ª—å")
        password_layout = QHBoxLayout()
        
        self.extract_password = QLineEdit()
        self.extract_password.setEchoMode(QLineEdit.Password)
        self.extract_password.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...")
        password_layout.addWidget(self.extract_password)
        
        self.show_extract_password_btn = QPushButton("üëÅ")
        self.show_extract_password_btn.setCheckable(True)
        self.show_extract_password_btn.toggled.connect(self.toggle_extract_password_visibility)
        self.show_extract_password_btn.setMaximumWidth(40)
        password_layout.addWidget(self.show_extract_password_btn)
        
        password_group.setLayout(password_layout)
        layout.addWidget(password_group)
        
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        self.extract_btn = QPushButton("üîì –ò–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        self.extract_btn.clicked.connect(self.extract_message)
        self.extract_btn.setMinimumHeight(40)
        layout.addWidget(self.extract_btn)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_group = QGroupBox("–ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        result_layout = QVBoxLayout()
        
        self.extracted_text = QTextEdit()
        self.extracted_text.setReadOnly(True)
        result_layout.addWidget(self.extracted_text)
        
        result_group.setLayout(result_layout)
        layout.addWidget(result_group)
        
        layout.addStretch()
        return widget
        
    def apply_dark_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É"""
        dark_style = """
        QMainWindow {
            background-color: #1e1e1e;
            color: #ffffff;
        }
        
        QWidget {
            background-color: #1e1e1e;
            color: #ffffff;
        }
        
        QGroupBox {
            border: 1px solid #3a3a3a;
            border-radius: 5px;
            margin-top: 10px;
            padding-top: 10px;
            font-weight: bold;
        }
        
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }
        
        QLineEdit {
            background-color: #2d2d2d;
            border: 1px solid #3a3a3a;
            border-radius: 3px;
            padding: 5px;
            color: #ffffff;
        }
        
        QTextEdit {
            background-color: #2d2d2d;
            border: 1px solid #3a3a3a;
            border-radius: 3px;
            padding: 5px;
            color: #ffffff;
        }
        
        QPushButton {
            background-color: #0d7377;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 8px;
            font-weight: bold;
        }
        
        QPushButton:hover {
            background-color: #14a085;
        }
        
        QPushButton:pressed {
            background-color: #0a5d61;
        }
        
        QTabWidget::pane {
            border: 1px solid #3a3a3a;
            background-color: #1e1e1e;
        }
        
        QTabBar::tab {
            background-color: #2d2d2d;
            color: #ffffff;
            padding: 8px 20px;
            margin-right: 2px;
        }
        
        QTabBar::tab:selected {
            background-color: #0d7377;
        }
        
        QStatusBar {
            background-color: #2d2d2d;
            color: #ffffff;
        }
        """
        self.setStyleSheet(dark_style)
        
    def browse_hide_image(self):
        """–í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.webp)"
        )
        if file_path:
            self.hide_image_path.setText(file_path)
            self.update_status(f"–í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {Path(file_path).name}")
            
    def browse_extract_image(self):
        """–í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.webp)"
        )
        if file_path:
            self.extract_image_path.setText(file_path)
            self.update_status(f"–í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {Path(file_path).name}")
            
    def update_char_count(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤"""
        count = len(self.message_text.toPlainText())
        self.char_count_label.setText(f"–°–∏–º–≤–æ–ª–æ–≤: {count} / 4096")
        if count > 4096:
            self.char_count_label.setStyleSheet("color: #ff4444;")
        else:
            self.char_count_label.setStyleSheet("color: #44ff44;")
            
    def toggle_password_visibility(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
        if checked:
            self.hide_password.setEchoMode(QLineEdit.Normal)
            self.show_password_btn.setText("üôà")
        else:
            self.hide_password.setEchoMode(QLineEdit.Password)
            self.show_password_btn.setText("üëÅ")
            
    def toggle_extract_password_visibility(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
        if checked:
            self.extract_password.setEchoMode(QLineEdit.Normal)
            self.show_extract_password_btn.setText("üôà")
        else:
            self.extract_password.setEchoMode(QLineEdit.Password)
            self.show_extract_password_btn.setText("üëÅ")
            
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        self.status_bar.showMessage(message)
        
    def hide_message(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            image_path = self.hide_image_path.text()
            message = self.message_text.toPlainText()
            password = self.hide_password.text()
            
            if not image_path:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
                
            if not message:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
                
            if not password:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
                return
                
            if len(message) > 4096:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            capacity = self.stego_engine.calculate_capacity(image_path)
            encrypted_size = self.crypto_module.get_encrypted_size(len(message.encode()))
            
            self.hide_log.append(f"üìä –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {capacity} –±–∞–π—Ç")
            self.hide_log.append(f"üìè –†–∞–∑–º–µ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {encrypted_size} –±–∞–π—Ç")
            
            if encrypted_size > capacity:
                QMessageBox.warning(
                    self, 
                    "–û—à–∏–±–∫–∞", 
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {capacity} –±–∞–π—Ç"
                )
                return
                
            # –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.hide_log.append("üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            encrypted_data = self.crypto_module.encrypt(message, password)
            self.hide_log.append(f"‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ {len(encrypted_data)} –±–∞–π—Ç")
            
            # –í–Ω–µ–¥—Ä—è–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.hide_log.append("üìù –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            result_image = self.stego_engine.embed_data(image_path, encrypted_data, password)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            save_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                "stego_output.png",
                "PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png)"
            )
            
            if save_path:
                result_image.save(save_path, "PNG")
                self.hide_log.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {Path(save_path).name}")
                self.hide_log.append(f"üìä –í–Ω–µ–¥—Ä–µ–Ω–æ {len(encrypted_data)} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö")
                self.update_status("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–æ")
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                self.message_text.clear()
                self.hide_password.clear()
                
        except Exception as e:
            self.hide_log.append(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{str(e)}")
            import traceback
            traceback.print_exc()
            
    def extract_message(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            image_path = self.extract_image_path.text()
            password = self.extract_password.text()
            
            if not image_path:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
                
            if not password:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
                return
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.update_status("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            self.extracted_text.append("üîç –ü–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            encrypted_data = self.stego_engine.extract_data(image_path, password)
            
            if not encrypted_data:
                self.extracted_text.setText("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
                self.update_status("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
                
            self.extracted_text.append(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(encrypted_data)} –±–∞–π—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            self.update_status("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            self.extracted_text.append("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...")
            
            message = self.crypto_module.decrypt(encrypted_data, password)
            
            if message:
                self.extracted_text.clear()
                self.extracted_text.setText(message)
                self.update_status("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
            else:
                self.extracted_text.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å.")
                self.update_status("–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
                
        except Exception as e:
            self.extracted_text.setText(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{str(e)}")
            import traceback
            traceback.print_exc()
            
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        event.accept()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setWindowIcon(QIcon())
    
    window = StegoGhostGUI()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main() 